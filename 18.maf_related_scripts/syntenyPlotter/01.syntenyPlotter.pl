#! /usr/bin/env perl
use strict;
use warnings;

my $maf_record="opn4.record"; # input file, generated by maf_analysis.pl and maf file
my $sel_chr="tanaka.scaffold1296"; # selected chromosome; chromosome for plot
my $sel_start="1100000";  # start position
my $sel_end="1140000";    # end position
my $svg_file="syntenyPlotter.$sel_chr.${sel_start}-${sel_end}.svg"; # output svg file name
my $width=500;
my $height=100;
my $gap=5;

my $sel_len=$sel_end-$sel_start+1;

my %links;
my %lines;
my %q_strand_determination; # determin the strand of query scaffold/chr
open I,"< $maf_record";
while (<I>) {
    chomp;
    next unless(/^\*+START/);
    my $head=<I>;
    chomp $head;
    my ($chr,$length)=split(/\s+/,$head);
    next unless($chr eq $sel_chr);
    while (my $line=<I>) {
        chomp;
        last if($line=~/^\*+END/);
        my @a=split(/\s+/,$line);
        next unless(@a>=8);
        my ($ref_start,$ref_end,$strand,$marker,$q_chr,$q_start,$q_end,$q_strand)=@a;
        next unless($marker eq "<->");
        my $ref_mid=($ref_start+$ref_end)/2;
        my $q_mid=($q_start+$q_end)/2;
        if($q_strand eq "-"){
            my $t=$q_end;
            $q_end=$q_start;
            $q_start=$t;
        }
        my ($q_min,$q_max)=($q_start,$q_end);
        if($q_min>$q_max){
            my $t=$q_max;
            $q_max=$q_min;
            $q_min=$t;
        }
        next unless($ref_mid>=$sel_start && $ref_mid<$sel_end);
        $q_strand_determination{$q_chr}{$q_strand}+=abs($q_end-$q_start+1);
        if(!exists $lines{$q_chr}){
            $lines{$q_chr}{start}=$q_min;
            $lines{$q_chr}{end}=$q_max;
        }
        if ($lines{$q_chr}{end}<$q_max) {
            $lines{$q_chr}{end}=$q_max;
        }
        if ($lines{$q_chr}{start}>$q_min) {
            $lines{$q_chr}{start}=$q_min;
        }
        $links{$q_chr}{$q_mid}{ref_start} = $ref_start;
        $links{$q_chr}{$q_mid}{ref_end}   = $ref_end;
        $links{$q_chr}{$q_mid}{q_start}   = $q_start;
        $links{$q_chr}{$q_mid}{q_end}     = $q_end;
        push @{$lines{$q_chr}{ref_pos}},$ref_mid;
    }
}
close I;

my %q_chr;
foreach my $q_chr(keys %lines){
    my $len=$lines{$q_chr}{end}-$lines{$q_chr}{start}+1;
    my $effective_len_plus=0; if(exists $q_strand_determination{$q_chr}{"+"}){$effective_len_plus=$q_strand_determination{$q_chr}{"+"}}
    my $effective_len_minus=0; if(exists $q_strand_determination{$q_chr}{"-"}){$effective_len_minus=$q_strand_determination{$q_chr}{"-"}}
    my $effective_len=$effective_len_plus+$effective_len_minus;
    if($effective_len/$len<0.1){
        print STDERR "warning: $q_chr ignored. short aligned length\n";
        # next;
    }
    if($len/$sel_len<0.02){
        print STDERR "warning: $q_chr ignored. short length\n";
        next;
    }
    my @ref_mid=@{$lines{$q_chr}{ref_pos}};
    my $x=int(scalar(@ref_mid)/2+0.5)-1;
    $q_chr{$q_chr}=$ref_mid[$x];
    $lines{$q_chr}{len}=$len;
    $lines{$q_chr}{strand}="+";
    if($effective_len_minus>$effective_len_plus){
        $lines{$q_chr}{strand}="-";
    }
}

open O,"> $svg_file";
print O '<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: syntenyPlotter.V0.1.KunWang.wk8910@gmail.com. SVG Version: 6.00 Build 0)  -->
<svg version="1.1" baseProfile="basic" id="Layer_1"
 xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 841.9 595.3"
 xml:space="preserve">
';
print O '<line fill="none" stroke="#000000" stroke-miterlimit="10" x1="0" y1="0" x2="'.$width.'" y2="0"/>
';
my $ref_label_pos=0.5*$width;
print O '<text x="'.$ref_label_pos.'" y="'."-10".'" font-family="Arial" font-size="12">'."$sel_chr    +".'</text>
<text x="'."0".'" y="'."-5".'" font-family="Arial" font-size="8">'."$sel_start".'</text>
<text x="'.$width.'" y="'."-5".'" font-family="Arial" font-size="8">'."$sel_end".'</text>
';
my $step=0;
foreach my $q_chr(sort {$q_chr{$a}<=>$q_chr{$b}} keys %q_chr){
    print STDERR "$q_chr\t$lines{$q_chr}{len}\t$lines{$q_chr}{strand}\t$q_chr{$q_chr}\n";
    my $origin_x2=($lines{$q_chr}{len}/$sel_len)*$width;
    my $x2=$origin_x2+$step;
    my $q_label_pos=0.5*$origin_x2+$step;
    my $h1=$height+20;
    my $h2=$height+15;
    print O '<line fill="none" stroke="#000000" stroke-miterlimit="10" x1="'.$step.'" y1="'.$height.'" x2="'.$x2.'" y2="'.$height.'"/>
<text x="'.$q_label_pos.'" y="'.$h1.'" font-family="Arial" font-size="8">'."$q_chr:$lines{$q_chr}{strand}".'</text>
';
    if($lines{$q_chr}{strand} eq "+"){
        print O '<text x="'.$step.'" y="'.$h2.'" font-family="Arial" font-size="8">'.$lines{$q_chr}{start}.'</text>
<text x="'.$x2.'" y="'.$h2.'" font-family="Arial" font-size="8">'.$lines{$q_chr}{end}.'</text>
';
    }
    else {
        print O '<text x="'.$x2.'" y="'.$h2.'" font-family="Arial" font-size="8">'.$lines{$q_chr}{start}.'</text>
<text x="'.$step.'" y="'.$h2.'" font-family="Arial" font-size="8">'.$lines{$q_chr}{end}.'</text>
';
    }
    foreach my $q_mid(sort {$a<=>$b} keys %{$links{$q_chr}}){
        my $ref_start = $links{$q_chr}{$q_mid}{ref_start};
        my $ref_end   = $links{$q_chr}{$q_mid}{ref_end};
        my $ref_x1=($ref_start-$sel_start)*($width/$sel_len);
        my $ref_x2=($ref_end-$sel_start)*($width/$sel_len);

        my $q_start   = $links{$q_chr}{$q_mid}{q_start};
        my $q_end     = $links{$q_chr}{$q_mid}{q_end};
        my $q_x1=(($q_start-$lines{$q_chr}{start})*($width/$sel_len))+$step;
        my $q_x2=(($q_end-$lines{$q_chr}{start})*($width/$sel_len))+$step;
        if($lines{$q_chr}{strand} eq "-"){
            $q_x1=(($lines{$q_chr}{end}-$q_start)*($width/$sel_len))+$step;
            $q_x2=(($lines{$q_chr}{end}-$q_end)*($width/$sel_len))+$step;
        }

        my $gap_end=$q_x2-$ref_x2;
        my $gap_start=$q_x1-$ref_x1;
        my $mid1=$height*0.5;
        my $mid2=$height*0.5;
        print O '<path opacity="0.2" fill="#353535" d="M'.$ref_x1.','."0".'H'.$ref_x2.'c'."0".','.$mid1.','.$gap_end.','.$mid2.','.$gap_end.','.$height.'H'.$q_x1.'c'."0".','.-1*$mid2.','.-1*$gap_start.','.-1*$mid1.','.-1*$gap_start.','."-$height".'z"/>
';
    }
    $step+=$origin_x2+$gap;
}
print O '</svg>
';

close O;
